<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Editor</title>
</head>
<body>
    <input type="file" id="fileInput" accept=".txt, .html, .css, .js, .json, .md">
    <br>
    <br>
    <button id="saveButton">download updated file</button>

    <script>
        const fileInput = document.getElementById('fileInput');
        const saveButton = document.getElementById('saveButton');
        let currentFileName = "games";
        let currentFileContent = '';
        let relFileName = "games"

        /**
         * Injects a new script tag into the provided HTML content.
         * @param {string} fileContent The original HTML content.
         * @returns {string} The modified HTML content with the new script.
         */
        function injectScript(fileContent) {
            const newScript = `<script>
            async function fetchFileContent(fileName) {
                const fileUrl = \`https://raw.githubusercontent.com/goaded/bazinga/main/\${fileName}\`;
                try {
                    const response = await fetch(fileUrl);
                    if (!response.ok) {
                        throw new Error(\`Failed to fetch \${fileName}: HTTP \${response.status}\`);
                    }
                    return await response.text();
                } catch (error) {
                    console.error(error.message);
                    alert(\`Error: \${error.message}\`);
                    throw error;
                }
            }

            async function checkUrlAllowance() {
                try {
                    const allowContent = await fetchFileContent("allow");
                    const allowedList = allowContent.split("/").map(item => item.trim());
                    const currentURL = window.location.href;
                    const isAllowed = allowedList.some(item => currentURL.includes(item));

                    if (!isAllowed) {
                        handleDisallowedUrl();
                    }
                } catch (error) {
                    console.error("Error checking allowed URLs:", error.message);
                }
            }

            function handleDisallowedUrl() {
                const urlParts = window.location.href.split("/");
                const userIdPart = urlParts.find(part => part.includes("u-"));
                if (userIdPart) {
                    alert(\`Please send your user ID (\${userIdPart}) to Cooper or Grady for access to ${relFileName}.\`);
                    document.documentElement.innerHTML = '';
                }
            }
            checkUrlAllowance();
        <\/script>`;

            const bodyEndTagIndex = fileContent.lastIndexOf('</body>');
            if (bodyEndTagIndex !== -1) {
                return fileContent.slice(0, bodyEndTagIndex) + newScript + '\\n' + fileContent.slice(bodyEndTagIndex);
            }
            return fileContent + newScript;
        }

        /**
         * Initiates the download of the modified file content.
         * @param {string} fileContent The content to be downloaded.
         */
        function downloadModifiedFile(fileContent) {
            const modifiedContent = injectScript(fileContent);
            const blob = new Blob([modifiedContent], { type: 'text/plain' });
            const a = document.createElement('a');

            a.href = URL.createObjectURL(blob);
            a.download = currentFileName;
            a.style.display = 'none';

            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(a.href);
        }

        fileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                currentFileName = file.name;
                relFileName = currentFileName.split(".")[0]
                reader.onload = (e) => {
                    currentFileContent = e.target.result;
                };
                reader.readAsText(file);
            }
        });

        saveButton.addEventListener('click', () => {
            if (currentFileContent) {
                downloadModifiedFile(currentFileContent);
            } else {
                alert('Please select a file first.');
            }
        });
    </script>
</body>
</html>
